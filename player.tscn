[gd_scene load_steps=20 format=3 uid="uid://bnqi03y2dl6e7"]

[ext_resource type="Script" uid="uid://bt340a7i5ar4w" path="res://player.gd" id="1_4ivg5"]
[ext_resource type="Shader" uid="uid://de2vc7d4gh74w" path="res://Shaders/Outline.gdshader" id="2_ffn7p"]
[ext_resource type="Shader" uid="uid://lknhyb2p5dot" path="res://Shaders/toon.gdshader" id="3_skmdc"]
[ext_resource type="Script" uid="uid://d13mrf2y62hup" path="res://State Machine/state_machine.gd" id="5_qhaxn"]
[ext_resource type="Script" uid="uid://c7kiomdsmwjkq" path="res://State Machine/Player States/grounded.gd" id="6_p3tak"]
[ext_resource type="Script" uid="uid://c5uy8g10c2qy2" path="res://State Machine/Player States/airborne.gd" id="7_xm0pw"]
[ext_resource type="Script" uid="uid://bp8rmqwmns5d3" path="res://State Machine/Player States/free_space.gd" id="8_blphk"]
[ext_resource type="Script" uid="uid://bb5hj56xbxktm" path="res://State Machine/Player States/ledge_climbing.gd" id="9_jp1l5"]
[ext_resource type="Script" uid="uid://bnfavwkvvyj2e" path="res://State Machine/Player States/sliding.gd" id="10_kv52j"]
[ext_resource type="Script" uid="uid://bvfpftyt2on5m" path="res://State Machine/Player States/vaulting.gd" id="11_usg6b"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ffn7p"]
render_priority = 0
shader = ExtResource("3_skmdc")
shader_parameter/toon_shaded = true
shader_parameter/tint = Color(1, 1, 1, 1)
shader_parameter/shadow_size = 0.045
shader_parameter/shadow_blend = 0.001
shader_parameter/shadow_extra_intensity = 0.0
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/light_tint = Color(1, 0.670588, 0.74902, 1)
shader_parameter/rimlight_size = 0.921
shader_parameter/rimlight_blend = 0.01
shader_parameter/rimlight_color = Color(0, 0, 0, 1)
shader_parameter/use_shadow_normalmap = true
shader_parameter/animated = true
shader_parameter/time_scale = 0.02
shader_parameter/normal_bias = Vector3(0, 0, 0)
shader_parameter/light_bias = Vector3(0, 0, 0)
shader_parameter/use_view = true
shader_parameter/view_bias = Color(1, 0, 1, 1)
shader_parameter/view_multiplier = -1.0
shader_parameter/world_project_toggle = false
shader_parameter/normal_intensity = 0.0
shader_parameter/blend_sharpness = 10.0
shader_parameter/Tiling_Scale = 0.5
shader_parameter/Tiling_Offset = 0.0

[sub_resource type="CapsuleMesh" id="CapsuleMesh_xv06v"]
material = SubResource("ShaderMaterial_ffn7p")

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_4ivg5"]

[sub_resource type="SphereShape3D" id="SphereShape3D_g6ire"]

[sub_resource type="QuadMesh" id="QuadMesh_skmdc"]
flip_faces = true
size = Vector2(3, 3)

[sub_resource type="Shader" id="Shader_ffn7p"]
code = "shader_type spatial;

render_mode unshaded, depth_prepass_alpha;

void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}

uniform sampler2D BackBufferTex : hint_screen_texture, repeat_disable, filter_nearest;
uniform sampler2D DepthBufferTex : hint_depth_texture, repeat_disable, filter_nearest;
uniform sampler2D NormalBufferTex: hint_normal_roughness_texture, repeat_disable, filter_nearest;
uniform float luma_threshold: hint_range(0, 1) = 0.375;
uniform float low_threshold: hint_range(0, 1) = 0.05;
uniform float high_threshold: hint_range(0, 1) = 0.2;
uniform float depth_threshold: hint_range(0, 1) = 0.1;
uniform float near = 0.05; // Set to \"near\" of camera, doesn't actually do anything
uniform float far = 4000.0; // Set to \"far\" of camera
uniform float epsilon = 0.001; // Avoid division by zero
uniform int destab_iter = 100;

// Constants for offsets
const ivec2 OffSW = ivec2(-1, 1);
const ivec2 OffSE = ivec2(1, 1);
const ivec2 OffNE = ivec2(1, -1);
const ivec2 OffNW = ivec2(-1, -1);

// Scharr operator kernels
const mat3 scharr_kernel_x = mat3(vec3(-3, 0, 3), 
								  vec3(-10, 0, 10), 
								  vec3(-3, 0, 3));

const mat3 scharr_kernel_y = mat3(vec3(-3, -10, -3), 
								  vec3(0, 0, 0), 
								  vec3(3, 10, 3));

const mat3 gaussian_kernel = mat3(vec3(0.0625, 0.125, 0.0625),
								 vec3(0.125,  0.25,  0.125),
								 vec3(0.0625, 0.125, 0.0625));

// Function to calculate luminance
float getLuma(vec3 color) {
	return dot(color, vec3(0.299, 0.587, 0.114));
}

// Function to calculate chroma
vec3 getChroma(vec3 color) {
	float maxComponent = max(max(color.r, color.g), color.b);
	return color / (maxComponent + epsilon); // Add epsilon to avoid division by zero
}

// Function to sample luminance at an offset
float sampleLumaOff(vec2 uv, ivec2 offset, vec2 texSize) {
	return getLuma(texture(BackBufferTex, uv + vec2(offset) / texSize).rgb);
}

// Sampling functions
vec3 sampleColor(vec2 p) {
	return texture(BackBufferTex, p).rgb;
}

vec3 sampleColorFromNormal(vec2 p) {
	return texture(NormalBufferTex, p).rgb;
}

// Function to linearize depth value
float linearizeDepth(float depth, vec2 uv, mat4 inv_projection_matrix) {
	vec3 ndc = vec3(uv * 2.0 - 1.0, depth);
	vec4 view = inv_projection_matrix * vec4(ndc, 1.0);
	view.xyz /= view.w;
	return -view.z;
}

// Function to calculate depth difference
float getDepthDifference(vec2 uv, vec2 texSize, mat4 inv_projection_matrix, out bool outOfBounds) {
	outOfBounds = false;
	float centerDepth = linearizeDepth(texture(DepthBufferTex, uv).x, uv, inv_projection_matrix);
	if (centerDepth > far) {
		outOfBounds = true;
	}
	float maxDepthDifference = 0.0;

	for (int x = -1; x <= 1; x++) {
		for (int y = -1; y <= 1; y++) {
			if (x == 0 && y == 0) continue; // Skip the center pixel
			vec2 offset = vec2(float(x), float(y)) / texSize;
			float neighborDepth = linearizeDepth(texture(DepthBufferTex, uv + offset).x, uv + offset, inv_projection_matrix);
			if (neighborDepth < far) {
				outOfBounds = false; 
			}
			maxDepthDifference = max(maxDepthDifference, abs(centerDepth - neighborDepth));
		}
	}

	return maxDepthDifference / (centerDepth + epsilon); // Normalize depth difference
}

vec3 gaussianBlur(vec2 uv, vec2 texSize) {
	vec3 colorSum = vec3(0.0);
	for (int x = -1; x <= 1; x++) {
		for (int y = -1; y <= 1; y++) {
			vec2 offset = vec2(float(x), float(y)) / texSize;
			colorSum += texture(BackBufferTex, uv + offset).rgb * gaussian_kernel[x + 1][y + 1];
		}
	}
	return colorSum;
}

// Function to apply Scharr filter
vec2 applyScharr(vec2 uv, vec2 texSize) {
	float gx = 0.0;
	float gy = 0.0;

	for (int x = -1; x <= 1; x++) {
		for (int y = -1; y <= 1; y++) {
			vec3 sampleColor = sampleColor(uv + vec2(float(x), float(y)) / texSize);
			float luma = getLuma(sampleColor);
			gx += luma * scharr_kernel_x[x + 1][y + 1];
			gy += luma * scharr_kernel_y[x + 1][y + 1];
		}
	}
	return vec2(gx, gy);
}

// Function to apply Scharr filter
vec2 applyScharrToNormal(vec2 uv, vec2 texSize) {
	float gx = 0.0;
	float gy = 0.0;

	for (int x = -1; x <= 1; x++) {
		for (int y = -1; y <= 1; y++) {
			vec3 sampleColor = sampleColorFromNormal(uv + vec2(float(x), float(y)) / texSize);
			float luma = getLuma(sampleColor);
			gx += luma * scharr_kernel_x[x + 1][y + 1];
			gy += luma * scharr_kernel_y[x + 1][y + 1];
		}
	}
	return vec2(gx, gy);
}

const mat3 prewitt_kernel_x = mat3(
	vec3(-1, 0, 1),
	vec3(-1, 0, 1),
	vec3(-1, 0, 1)
);
const mat3 prewitt_kernel_y = mat3(
	vec3(1, 1, 1),
	vec3(0, 0, 0),
	vec3(-1, -1, -1)
);

vec2 applyPrewitt(vec2 uv, vec2 tex_size) {
	vec2 kernel_size = vec2(3, 3);
	vec2 half_kernel = kernel_size / 2.0;
	float sum_x = 0.0;
	float sum_y = 0.0;	
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			vec2 uv_offset = (vec2(float(i), float(j)) - half_kernel) / tex_size;
			vec4 texel = texture(BackBufferTex, uv + uv_offset);
			float intensity = (texel.r + texel.g + texel.b) / 3.0;
			sum_x += prewitt_kernel_x[i][j] * intensity;
			sum_y += prewitt_kernel_y[i][j] * intensity;
		}
	}
	return vec2(sum_x, sum_y);
}

vec2 applyPrewittToNormal(vec2 uv, vec2 tex_size) {
	vec2 kernel_size = vec2(3, 3);
	vec2 half_kernel = kernel_size / 2.0;
	float sum_x = 0.0;
	float sum_y = 0.0;	
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			vec2 uv_offset = (vec2(float(i), float(j)) - half_kernel) / tex_size;
			vec4 texel = texture(NormalBufferTex, uv + uv_offset);
			float intensity = (texel.r + texel.g + texel.b) / 3.0;
			sum_x += prewitt_kernel_x[i][j] * intensity;
			sum_y += prewitt_kernel_y[i][j] * intensity;
		}
	}
	return vec2(sum_x, sum_y);
}

void fragment() {
	vec2 texSize = vec2(textureSize(BackBufferTex, 0));
	vec2 uv = SCREEN_UV;
	vec2 RCP2 = 2.0 / texSize;
	
	// Depth difference for depth-aware blending
	bool outOfBounds;
	float depthDifference = getDepthDifference(uv, texSize, INV_PROJECTION_MATRIX, outOfBounds);
	if (outOfBounds) {
		discard;
	}
	bool depthEdge = depthDifference > depth_threshold;
	
	// Scharr-based edge detection
	vec2 gradient = applyScharr(uv, texSize);
	float gradientMagnitude = length(gradient);
	vec2 normalGradient = applyScharrToNormal(uv, texSize);
	float normalGradientMagnitude = length(normalGradient);
	//vec2 prewittGradient = applyPrewitt(uv, texSize);
	//float prewittGradientMagnitude = length(gradient);
	//vec2 prewittNormalGradient = applyPrewittToNormal(uv, texSize);
	//float prewittNormalGradientMagnitude = length(normalGradient);

	bool isStrongEdge = gradientMagnitude >= high_threshold;// || prewittGradientMagnitude >= high_threshold;
	bool isWeakEdge = (gradientMagnitude >= low_threshold && gradientMagnitude < high_threshold);// || (prewittGradientMagnitude >= low_threshold && prewittGradientMagnitude < high_threshold);
	bool isNormalStrongEdge = normalGradientMagnitude >= high_threshold;// || prewittNormalGradientMagnitude >= high_threshold;
	bool isNormalWeakEdge = (normalGradientMagnitude >= low_threshold && normalGradientMagnitude < high_threshold);// || (prewittNormalGradientMagnitude >= low_threshold && prewittNormalGradientMagnitude < high_threshold);

	bool isConnectedToStrongEdge = false;
	if (isWeakEdge || isNormalWeakEdge) {
		for (int x = -1; x <= 1; x++) {
			for (int y = -1; y <= 1; y++) {
				if (x == 0 && y == 0) continue; // Skip the center pixel

				vec2 neighborUV = uv + vec2(float(x), float(y)) / texSize;
				vec2 neighborGradient = applyScharr(neighborUV, texSize); //neighborUV instead of uv here made it worse?
				float neighborStrength = length(neighborGradient);
				vec2 neighborNormalGradient = applyScharrToNormal(neighborUV, texSize); //neighborUV instead of uv here made it worse?
				float neighborNormalStrength = length(neighborNormalGradient);				

				if (neighborStrength > high_threshold || neighborNormalStrength > high_threshold) {
					isConnectedToStrongEdge = true;
					break;
				}
			}
			if (isConnectedToStrongEdge) break;
		}
	}

	bool cannyEdge = isStrongEdge || isNormalStrongEdge || (isWeakEdge && isConnectedToStrongEdge) || (isNormalWeakEdge && isConnectedToStrongEdge);

	// Additional luminance-based edge refinement
	vec4 lumaA;
	lumaA.x = sampleLumaOff(uv, OffSW, texSize);
	lumaA.y = sampleLumaOff(uv, OffSE, texSize);
	lumaA.z = sampleLumaOff(uv, OffNE, texSize);
	lumaA.w = sampleLumaOff(uv, OffNW, texSize);

	float gradientSWNE = lumaA.x - lumaA.z;
	float gradientSENW = lumaA.y - lumaA.w;
	vec2 dir = vec2(gradientSWNE + gradientSENW, gradientSWNE - gradientSENW);
	vec2 dirM = abs(dir);
	float dirMMin = min(dirM.x, dirM.y);
	vec2 offM = clamp(vec2(0.0625) * dirM / dirMMin, 0.0, 1.0);
	vec2 offMult = RCP2 * sign(dir);

	bool passC;
	float offMMax = max(offM.x, offM.y);
	vec4 lumaAC = lumaA;
	if (abs(offMMax - 1.0) < 0.0001) {
		bool horSpan = abs(offM.x - 1.0) < 0.0001;
		bool negSpan = horSpan ? offMult.x < 0.0 : offMult.y < 0.0;
		bool sowSpan = horSpan == negSpan;
		vec2 uvC = uv;
		if (horSpan) uvC.x += 2.0 * offMult.x;
		if (!horSpan) uvC.y += 2.0 * offMult.y;

		if (sowSpan) lumaAC.x = sampleLumaOff(uvC, OffSW, texSize);
		if (!negSpan) lumaAC.y = sampleLumaOff(uvC, OffSE, texSize);
		if (!sowSpan) lumaAC.z = sampleLumaOff(uvC, OffNE, texSize);
		if (negSpan) lumaAC.w = sampleLumaOff(uvC, OffNW, texSize);

		float gradientSWNEC = lumaAC.x - lumaAC.z;
		float gradientSENWC = lumaAC.y - lumaAC.w;
		vec2 dirC = vec2(gradientSWNEC + gradientSENWC, gradientSWNEC - gradientSENWC);

		if (!horSpan) dirC = dirC.yx;
		passC = abs(dirC.x) > 2.0 * abs(dirC.y);
		if (passC) offMult *= 2.0;
	}

	// Combine edge detections: Depth-based, Canny-based, Additional Luminance-based
	int edge = 0;
	if (depthEdge) edge += 1;
	if (cannyEdge) edge += 1;
	//if (abs(offMMax - 1.0) < 0.0001 && passC) edge += 1;
	bool isEdge = (edge > 0);
	
	// Blend colors based on combined edge detection
	vec3 finalColor;
	float finalAlpha = 1.0;
	if (isEdge) {
		// Collect neighborhood colors and chroma
		vec3 neighborhoodColors[9];
		float neighborhoodLuma[9];
		vec3 neighborhoodChroma[9];
		int index = 0;
		for (int x = -1; x <= 1; x++) {
			for (int y = -1; y <= 1; y++) {
				vec2 offset = vec2(float(x), float(y)) / texSize;
				vec3 color = texture(BackBufferTex, uv + offset).rgb;
				neighborhoodColors[index] = color;
				neighborhoodLuma[index] = getLuma(color);
				neighborhoodChroma[index] = getChroma(color);
				index++;
			}
		}

		// Calculate local variance	
		vec3 rgbM = sampleColor(uv);
		float localVariance = 0.0;
		for (int i = 0; i < 9; i++) {
			localVariance += distance(rgbM, neighborhoodColors[i]);
		}
		localVariance /= 9.0;

		// Calculate dynamic threshold based on local variance
		float dynamicThreshold = mix(luma_threshold, 1.0, localVariance); // Mix based on local variance

		if (localVariance > dynamicThreshold) {
			discard;
		}

		// Advanced blending logic
		vec2 offset = offM * offMult;
		vec3 rgbN = sampleColor(uv - offset);
		vec3 rgbP = sampleColor(uv + offset);

		// Chroma check
		float lumaMin = min(min(min(min(min(min(min(min(neighborhoodLuma[0], neighborhoodLuma[1]), neighborhoodLuma[2]), neighborhoodLuma[3]), neighborhoodLuma[4]), neighborhoodLuma[5]), neighborhoodLuma[6]), neighborhoodLuma[7]), neighborhoodLuma[8]);
		float lumaACMin = min(min(lumaAC.x, lumaAC.y), min(lumaAC.z, lumaAC.w));
		float lumaMax = max(max(max(max(max(max(max(max(neighborhoodLuma[0], neighborhoodLuma[1]), neighborhoodLuma[2]), neighborhoodLuma[3]), neighborhoodLuma[4]), neighborhoodLuma[5]), neighborhoodLuma[6]), neighborhoodLuma[7]), neighborhoodLuma[8]);
		float lumaACMax = max(max(lumaAC.x, lumaAC.y), max(lumaAC.z, lumaAC.w));
		lumaMin = min(lumaMin, lumaACMin);
		lumaMax = max(lumaMax, lumaACMax);
		vec3 chromaMin = min(min(min(min(min(min(min(min(neighborhoodChroma[0], neighborhoodChroma[1]), neighborhoodChroma[2]), neighborhoodChroma[3]), neighborhoodChroma[4]), neighborhoodChroma[5]), neighborhoodChroma[6]), neighborhoodChroma[7]), neighborhoodChroma[8]);
		vec3 chromaMax = max(max(max(max(max(max(max(max(neighborhoodChroma[0], neighborhoodChroma[1]), neighborhoodChroma[2]), neighborhoodChroma[3]), neighborhoodChroma[4]), neighborhoodChroma[5]), neighborhoodChroma[6]), neighborhoodChroma[7]), neighborhoodChroma[8]);
		bool withinRange = false;
		for (int i = 0; i < destab_iter; i++) {
			float mixmul = clamp(0.4 + ((float(i) * 0.6 / float(destab_iter)) * float(((i % 2) * 2) - 1)), 0.0, 1.0);
			vec3 rgbR = (rgbN + rgbP) * (1.0 - mixmul)/2.0 + rgbM * mixmul;			
			float lumaR = getLuma(rgbR);
			vec3 chromaR = getChroma(rgbR);
			bool lumaOutOfRange = lumaR < lumaMin || lumaR > lumaMax;		
			bool chromaOutOfRange = any(lessThan(chromaR, chromaMin)) || any(greaterThan(chromaR, chromaMax));
			if (!lumaOutOfRange && !chromaOutOfRange) {
				finalColor = rgbR;
				withinRange = true;
				break;
			}
		}
		if (!withinRange) {
			discard;
		}
	} else {
		discard; // Use the original color if not an edge
	}

	ALBEDO = finalColor;
	ALPHA = finalAlpha;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qhaxn"]
render_priority = -128
shader = SubResource("Shader_ffn7p")
shader_parameter/luma_threshold = 0.375
shader_parameter/low_threshold = 0.05
shader_parameter/high_threshold = 0.2
shader_parameter/depth_threshold = 0.1
shader_parameter/near = 0.05
shader_parameter/far = 4000.0
shader_parameter/epsilon = 0.001
shader_parameter/destab_iter = 100

[sub_resource type="ShaderMaterial" id="ShaderMaterial_g6ire"]
render_priority = 0
next_pass = SubResource("ShaderMaterial_qhaxn")
shader = ExtResource("2_ffn7p")
shader_parameter/outlineColor = Color(0, 0, 0, 0.78)
shader_parameter/depth_threshold = 0.025
shader_parameter/normal_threshold = 0.5
shader_parameter/normal_smoothing = 0.25
shader_parameter/max_thickness = 1.3
shader_parameter/min_thickness = 0.5
shader_parameter/max_distance = 75.0
shader_parameter/min_distance = 2.0
shader_parameter/grazing_fresnel_power = 5.0
shader_parameter/grazing_angle_mask_power = 1.0
shader_parameter/grazing_angle_modulation_factor = 50.0

[sub_resource type="GDScript" id="GDScript_n7ghd"]
script/source = "extends Node
## Manages hook mechanics including launching, retracting, and player movement effects

@export_category(\"Hook Controller\")
@export_group(\"Required Settings\")
@export var hook_raycast: RayCast3D
@export var player_body: CharacterBody3D
@export var launch_action_name: String = \"grapple\"
@export var retract_action_name: String = \"grapple\"
@export_group(\"Optional Settings\")
@export var pull_speed: float = 15.0
@export var max_hook_distance: float = 30.0
@export var rope_tension: float = 0.5 # How much the rope resists stretching
@export var hook_source: Node3D
@export var free_space_pull_multiplier: float = 1.5 # Increased pull strength in free space
@export_group(\"Advanced Settings\")
@export var hook_scene: PackedScene = preload(\"res://addons/grappling_hook_3d/src/hook.tscn\")

enum HookState { INACTIVE, LAUNCHING, ATTACHED, RETRACTING }

var current_state: HookState = HookState.INACTIVE
var hook_instance: Node3D = null
var hook_target_position: Vector3 = Vector3.ZERO
var hook_target_normal: Vector3 = Vector3.ZERO
var hook_target_body: Node3D = null
var hook_distance: float = 0.0
var launch_velocity: Vector3 = Vector3.ZERO
var is_in_free_space: bool = false

signal hook_launched()
signal hook_attached(body: Node3D)
signal hook_detached()
signal hook_failed()
signal gravity_override_changed(should_override: bool)

func _ready():
	hook_raycast.target_position = Vector3(0, 0, -max_hook_distance)
	hook_raycast.enabled = true
	hook_raycast.force_raycast_update()


func set_free_space_mode(free_space: bool):
	is_in_free_space = free_space

func _physics_process(delta: float) -> void:
	match current_state:
		HookState.LAUNCHING:
			_process_launching(delta)
		HookState.ATTACHED:
			_process_attached(delta)
		HookState.RETRACTING:
			_retract_hook()
	
	if Input.is_action_just_pressed(launch_action_name):
		if current_state == HookState.INACTIVE:
			_launch_hook()
	if Input.is_action_just_released(retract_action_name):
		_retract_hook()

func _launch_hook() -> void:
	hook_raycast.force_raycast_update()
	if not hook_raycast.is_colliding():
		hook_failed.emit()
		return
	
	var collision_point = hook_raycast.get_collision_point()
	var collision_normal = hook_raycast.get_collision_normal()
	var collider = hook_raycast.get_collider()
	
	hook_target_position = collision_point
	hook_target_normal = collision_normal
	hook_target_body = collider
	hook_distance = player_body.global_position.distance_to(hook_target_position)
	
	# Create hook visual
	hook_instance = hook_scene.instantiate()
	add_child(hook_instance)
	
	# Calculate initial velocity based on player's current movement
	launch_velocity = player_body.velocity * 0.5
	
	current_state = HookState.LAUNCHING
	hook_launched.emit()

func _process_launching(delta: float) -> void:
	_attach_hook()

func _attach_hook() -> void:
	current_state = HookState.ATTACHED
	hook_attached.emit(hook_target_body)
	
	# Only override gravity in planetary mode
	if not is_in_free_space:
		gravity_override_changed.emit(true)
	
	if hook_target_body and hook_target_body.has_signal(\"tree_exiting\"):
		hook_target_body.tree_exiting.connect(_on_hook_target_exited)

func _process_attached(delta: float) -> void:
	# Update hook target position if attached to a moving body
	if hook_target_body:
		hook_target_position = hook_target_body.to_global(hook_target_body.to_local(hook_target_position))
	
	# Calculate pull direction
	var pull_direction = (hook_target_position - player_body.global_position).normalized()
	var current_distance = player_body.global_position.distance_to(hook_target_position)
	
	# Calculate pull strength
	var effective_pull_speed = pull_speed * (free_space_pull_multiplier if is_in_free_space else 1.0)
	var distance_ratio = clamp(current_distance / hook_distance, 1.0, 2.0)
	var pull_force = pull_direction * effective_pull_speed * distance_ratio
	
	if is_in_free_space:
		# In free space, apply direct velocity changes for more responsive movement
		player_body.velocity = player_body.velocity.lerp(
			pull_direction * effective_pull_speed,
			delta * rope_tension
		)
	else:
		# In planetary mode, use lerp but account for gravity
		var player_controller = player_body as CharacterBody3D
		if player_controller:
			var gravity_adjusted_pull = pull_direction * effective_pull_speed
			player_body.velocity = player_body.velocity.lerp(
				pull_direction * effective_pull_speed,
				delta * rope_tension * 10
			)
		
		# Add some upward force to help with movement
		if player_body.is_on_floor():
			pull_force += Vector3.UP * pull_speed * 0.5
	
	# Update rope visual
	if hook_instance:
		var source_pos = hook_source.global_position if hook_source else player_body.global_position
		hook_instance.extend_from_to(source_pos, hook_target_position, hook_target_normal)

func _retract_hook() -> void:
	_cleanup_hook()
	hook_detached.emit()

func _cleanup_hook() -> void:
	if hook_instance:
		hook_instance.queue_free()
		hook_instance = null
	
	if hook_target_body and hook_target_body.has_signal(\"tree_exiting\") and hook_target_body.tree_exiting.is_connected(_on_hook_target_exited):
		hook_target_body.tree_exiting.disconnect(_on_hook_target_exited)
	
	hook_target_body = null
	current_state = HookState.INACTIVE
	
	# Only restore gravity if we're in planetary mode
	if not is_in_free_space:
		gravity_override_changed.emit(false)

func _on_hook_target_exited() -> void:
	_retract_hook()

func is_hook_active() -> bool:
	return current_state != HookState.INACTIVE

func get_hook_direction() -> Vector3:
	if current_state == HookState.INACTIVE:
		return Vector3.ZERO
	return (hook_target_position - player_body.global_position).normalized()

func get_hook_pull_vector(delta: float) -> Vector3:
	if current_state != HookState.ATTACHED:
		return Vector3.ZERO
	
	# Update hook target position if attached to moving body
	if hook_target_body:
		hook_target_position = hook_target_body.to_global(hook_target_body.to_local(hook_target_position))
	
	# Calculate pull direction and strength
	var pull_direction = (hook_target_position - player_body.global_position).normalized()
	var current_distance = player_body.global_position.distance_to(hook_target_position)
	var distance_ratio = clamp(current_distance / hook_distance, 1.0, 2.0)
	
	# Return the pull force vector
	return pull_direction * pull_speed * distance_ratio * delta * free_space_pull_multiplier
"

[node name="Player" type="CharacterBody3D" groups=["player"]]
floor_max_angle = 0.698132
script = ExtResource("1_4ivg5")

[node name="DirectionRay" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
target_position = Vector3(0, 0, -1)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
visible = false
cast_shadow = 0
mesh = SubResource("CapsuleMesh_xv06v")

[node name="RemoteTransform3D" type="RemoteTransform3D" parent="MeshInstance3D"]

[node name="StandingCollision" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_4ivg5")

[node name="SlidingCollision" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
shape = SubResource("SphereShape3D_g6ire")
disabled = true

[node name="GroundRay" type="RayCast3D" parent="."]
target_position = Vector3(0, -0.15, 0)
hit_from_inside = true

[node name="SlideRay" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
target_position = Vector3(0, -1.5, 0)

[node name="CameraPivot" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.6, 0)

[node name="Camera3D" type="Camera3D" parent="CameraPivot"]
current = true
fov = 90.0

[node name="MeshInstance3D" type="MeshInstance3D" parent="CameraPivot/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.243185)
mesh = SubResource("QuadMesh_skmdc")
surface_material_override/0 = SubResource("ShaderMaterial_g6ire")

[node name="GrappleCast" type="RayCast3D" parent="CameraPivot/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.707575)
target_position = Vector3(0, 0, -25)
debug_shape_custom_color = Color(0, 0.627451, 0, 1)

[node name="HookRopeStart" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.412216, 1, -0.5)

[node name="HookController" type="Node" parent="." node_paths=PackedStringArray("hook_raycast", "player_body")]
script = SubResource("GDScript_n7ghd")
hook_raycast = NodePath("../CameraPivot/Camera3D/GrappleCast")
player_body = NodePath("..")

[node name="CrouchCameraPivot" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.7, 0)

[node name="LedgeDetectorRay" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.8, 0)
target_position = Vector3(0, 0.6, -0.6)

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("5_qhaxn")
metadata/_custom_type_script = "uid://beqa7yisaewie"

[node name="Grounded" type="Node" parent="StateMachine"]
script = ExtResource("6_p3tak")

[node name="Airborne" type="Node" parent="StateMachine"]
script = ExtResource("7_xm0pw")

[node name="FreeSpace" type="Node" parent="StateMachine"]
script = ExtResource("8_blphk")

[node name="LedgeClimbing" type="Node" parent="StateMachine"]
script = ExtResource("9_jp1l5")

[node name="Sliding" type="Node" parent="StateMachine"]
script = ExtResource("10_kv52j")

[node name="Vaulting" type="Node" parent="StateMachine"]
script = ExtResource("11_usg6b")
