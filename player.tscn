[gd_scene load_steps=27 format=3 uid="uid://bnqi03y2dl6e7"]

[ext_resource type="Script" uid="uid://bt340a7i5ar4w" path="res://player.gd" id="1_4ivg5"]
[ext_resource type="Shader" uid="uid://de2vc7d4gh74w" path="res://Shaders/Outline.gdshader" id="2_ffn7p"]
[ext_resource type="Shader" uid="uid://lknhyb2p5dot" path="res://Shaders/toon.gdshader" id="3_skmdc"]
[ext_resource type="Script" uid="uid://d13mrf2y62hup" path="res://State Machine/state_machine.gd" id="5_qhaxn"]
[ext_resource type="Script" uid="uid://c7kiomdsmwjkq" path="res://State Machine/Player States/grounded.gd" id="6_p3tak"]
[ext_resource type="Script" uid="uid://c5uy8g10c2qy2" path="res://State Machine/Player States/airborne.gd" id="7_xm0pw"]
[ext_resource type="Script" uid="uid://bp8rmqwmns5d3" path="res://State Machine/Player States/free_space.gd" id="8_blphk"]
[ext_resource type="Script" uid="uid://bb5hj56xbxktm" path="res://State Machine/Player States/ledge_climbing.gd" id="9_jp1l5"]
[ext_resource type="Script" uid="uid://bnfavwkvvyj2e" path="res://State Machine/Player States/sliding.gd" id="10_kv52j"]
[ext_resource type="Shader" uid="uid://cuii6jj6mssvi" path="res://Shaders/chromatic_aberation.gdshader" id="11_nvl01"]
[ext_resource type="Script" uid="uid://bvfpftyt2on5m" path="res://State Machine/Player States/vaulting.gd" id="11_usg6b"]
[ext_resource type="Script" uid="uid://bclo2ptuddgjk" path="res://Shaders/chromatic_aberation.gd" id="12_ivps1"]
[ext_resource type="Shader" uid="uid://ckv5c0kkhjlow" path="res://Shaders/distortion.gdshader" id="13_urp6f"]
[ext_resource type="Script" uid="uid://dnvetk7s52dp6" path="res://speed_lines.gd" id="14_bwjto"]
[ext_resource type="Script" uid="uid://cs01dd4m5fjb7" path="res://speedrun_timer.gd" id="15_606se"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ffn7p"]
render_priority = 0
shader = ExtResource("3_skmdc")
shader_parameter/toon_shaded = true
shader_parameter/tint = Color(1, 1, 1, 1)
shader_parameter/shadow_size = 0.045
shader_parameter/shadow_blend = 0.001
shader_parameter/shadow_extra_intensity = 0.0
shader_parameter/shadow_color = Color(0, 0, 0, 1)
shader_parameter/light_tint = Color(1, 0.670588, 0.74902, 1)
shader_parameter/rimlight_size = 0.921
shader_parameter/rimlight_blend = 0.01
shader_parameter/rimlight_color = Color(0, 0, 0, 1)
shader_parameter/use_shadow_normalmap = true
shader_parameter/animated = true
shader_parameter/time_scale = 0.02
shader_parameter/normal_bias = Vector3(0, 0, 0)
shader_parameter/light_bias = Vector3(0, 0, 0)
shader_parameter/use_view = true
shader_parameter/view_bias = Color(1, 0, 1, 1)
shader_parameter/view_multiplier = -1.0
shader_parameter/world_project_toggle = false
shader_parameter/normal_intensity = 0.0
shader_parameter/blend_sharpness = 10.0
shader_parameter/Tiling_Scale = 0.5
shader_parameter/Tiling_Offset = 0.0

[sub_resource type="CapsuleMesh" id="CapsuleMesh_xv06v"]
material = SubResource("ShaderMaterial_ffn7p")

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_4ivg5"]

[sub_resource type="SphereShape3D" id="SphereShape3D_g6ire"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_606se"]
render_priority = 0
shader = ExtResource("2_ffn7p")
shader_parameter/outlineColor = Color(0, 0, 0, 0.78)
shader_parameter/depth_threshold = 0.025
shader_parameter/normal_threshold = 0.5
shader_parameter/normal_smoothing = 0.25
shader_parameter/max_thickness = 1.3
shader_parameter/min_thickness = 0.5
shader_parameter/max_distance = 75.0
shader_parameter/min_distance = 2.0
shader_parameter/grazing_fresnel_power = 5.0
shader_parameter/grazing_angle_mask_power = 1.0
shader_parameter/grazing_angle_modulation_factor = 50.0

[sub_resource type="QuadMesh" id="QuadMesh_u1c27"]
material = SubResource("ShaderMaterial_606se")
flip_faces = true
size = Vector2(2, 2)

[sub_resource type="GDScript" id="GDScript_n7ghd"]
script/source = "extends Node
## Manages hook mechanics including launching, retracting, and player movement effects

@export_category(\"Hook Controller\")
@export_group(\"Required Settings\")
@export var hook_raycast: RayCast3D
@export var player_body: CharacterBody3D
@export var launch_action_name: String = \"grapple\"
@export var retract_action_name: String = \"grapple\"
@export_group(\"Optional Settings\")
@export var pull_speed: float = 15.0
@export var max_hook_distance: float = 30.0
@export var rope_tension: float = 0.5 # How much the rope resists stretching
@export var hook_source: Node3D
@export var free_space_pull_multiplier: float = 1.5 # Increased pull strength in free space
@export_group(\"Advanced Settings\")
@export var hook_scene: PackedScene = preload(\"res://addons/grappling_hook_3d/src/hook.tscn\")

enum HookState { INACTIVE, LAUNCHING, ATTACHED, RETRACTING }

var current_state: HookState = HookState.INACTIVE
var hook_instance: Node3D = null
var hook_target_position: Vector3 = Vector3.ZERO
var hook_target_normal: Vector3 = Vector3.ZERO
var hook_target_body: Node3D = null
var hook_distance: float = 0.0
var launch_velocity: Vector3 = Vector3.ZERO
var is_in_free_space: bool = false

signal hook_launched()
signal hook_attached(body: Node3D)
signal hook_detached()
signal hook_failed()
signal gravity_override_changed(should_override: bool)

func _ready():
	hook_raycast.target_position = Vector3(0, 0, -max_hook_distance)
	hook_raycast.enabled = true
	hook_raycast.force_raycast_update()


func set_free_space_mode(free_space: bool):
	is_in_free_space = free_space

func _physics_process(delta: float) -> void:
	match current_state:
		HookState.LAUNCHING:
			_process_launching(delta)
		HookState.ATTACHED:
			_process_attached(delta)
		HookState.RETRACTING:
			_retract_hook()
	
	if Input.is_action_just_pressed(launch_action_name):
		if current_state == HookState.INACTIVE:
			_launch_hook()
	if Input.is_action_just_released(retract_action_name):
		_retract_hook()

func _launch_hook() -> void:
	hook_raycast.force_raycast_update()
	if not hook_raycast.is_colliding():
		hook_failed.emit()
		return
	
	var collision_point = hook_raycast.get_collision_point()
	var collision_normal = hook_raycast.get_collision_normal()
	var collider = hook_raycast.get_collider()
	
	hook_target_position = collision_point
	hook_target_normal = collision_normal
	hook_target_body = collider
	hook_distance = player_body.global_position.distance_to(hook_target_position)
	
	# Create hook visual
	hook_instance = hook_scene.instantiate()
	add_child(hook_instance)
	
	# Calculate initial velocity based on player's current movement
	launch_velocity = player_body.velocity * 0.5
	
	current_state = HookState.LAUNCHING
	hook_launched.emit()

func _process_launching(delta: float) -> void:
	_attach_hook()

func _attach_hook() -> void:
	current_state = HookState.ATTACHED
	hook_attached.emit(hook_target_body)
	
	# Only override gravity in planetary mode
	if not is_in_free_space:
		gravity_override_changed.emit(true)
	
	if hook_target_body and hook_target_body.has_signal(\"tree_exiting\"):
		hook_target_body.tree_exiting.connect(_on_hook_target_exited)

func _process_attached(delta: float) -> void:
	# Update hook target position if attached to a moving body
	if hook_target_body:
		hook_target_position = hook_target_body.to_global(hook_target_body.to_local(hook_target_position))
	
	# Calculate pull direction
	var pull_direction = (hook_target_position - player_body.global_position).normalized()
	var current_distance = player_body.global_position.distance_to(hook_target_position)
	
	# Calculate pull strength
	var effective_pull_speed = pull_speed * (free_space_pull_multiplier if is_in_free_space else 1.0)
	var distance_ratio = clamp(current_distance / hook_distance, 1.0, 2.0)
	var pull_force = pull_direction * effective_pull_speed * distance_ratio
	
	if is_in_free_space:
		# In free space, apply direct velocity changes for more responsive movement
		player_body.velocity = player_body.velocity.lerp(
			pull_direction * effective_pull_speed,
			delta * rope_tension
		)
	else:
		# In planetary mode, use lerp but account for gravity
		var player_controller = player_body as CharacterBody3D
		if player_controller:
			var gravity_adjusted_pull = pull_direction * effective_pull_speed
			player_body.velocity = player_body.velocity.lerp(
				pull_direction * effective_pull_speed,
				delta * rope_tension * 10
			)
		
		# Add some upward force to help with movement
		if player_body.is_on_floor():
			pull_force += Vector3.UP * pull_speed * 0.5
	
	# Update rope visual
	if hook_instance:
		var source_pos = hook_source.global_position if hook_source else player_body.global_position
		hook_instance.extend_from_to(source_pos, hook_target_position, hook_target_normal)

func _retract_hook() -> void:
	_cleanup_hook()
	hook_detached.emit()

func _cleanup_hook() -> void:
	if hook_instance:
		hook_instance.queue_free()
		hook_instance = null
	
	if hook_target_body and hook_target_body.has_signal(\"tree_exiting\") and hook_target_body.tree_exiting.is_connected(_on_hook_target_exited):
		hook_target_body.tree_exiting.disconnect(_on_hook_target_exited)
	
	hook_target_body = null
	current_state = HookState.INACTIVE
	
	# Only restore gravity if we're in planetary mode
	if not is_in_free_space:
		gravity_override_changed.emit(false)

func _on_hook_target_exited() -> void:
	_retract_hook()

func is_hook_active() -> bool:
	return current_state != HookState.INACTIVE

func get_hook_direction() -> Vector3:
	if current_state == HookState.INACTIVE:
		return Vector3.ZERO
	return (hook_target_position - player_body.global_position).normalized()

func get_hook_pull_vector(delta: float) -> Vector3:
	if current_state != HookState.ATTACHED:
		return Vector3.ZERO
	
	# Update hook target position if attached to moving body
	if hook_target_body:
		hook_target_position = hook_target_body.to_global(hook_target_body.to_local(hook_target_position))
	
	# Calculate pull direction and strength
	var pull_direction = (hook_target_position - player_body.global_position).normalized()
	var current_distance = player_body.global_position.distance_to(hook_target_position)
	var distance_ratio = clamp(current_distance / hook_distance, 1.0, 2.0)
	
	# Return the pull force vector
	return pull_direction * pull_speed * distance_ratio * delta * free_space_pull_multiplier
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ivps1"]
shader = ExtResource("11_nvl01")
shader_parameter/levels = 20
shader_parameter/spread = 0.001

[sub_resource type="FastNoiseLite" id="FastNoiseLite_bwjto"]
noise_type = 2
frequency = 0.0248

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_bwjto"]
width = 1024
height = 1024
noise = SubResource("FastNoiseLite_bwjto")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_bwjto"]
shader = ExtResource("13_urp6f")
shader_parameter/noise = SubResource("NoiseTexture2D_bwjto")
shader_parameter/line_count = 2.0
shader_parameter/distortion_power = 0.034
shader_parameter/line_falloff = 1.0
shader_parameter/mask_size = 0.175
shader_parameter/mask_edge = 0.195
shader_parameter/animation_speed = 20.0
shader_parameter/blur_strength = 0.01
shader_parameter/effect_power = 0.5

[node name="Player" type="CharacterBody3D" groups=["player"]]
floor_max_angle = 0.698132
script = ExtResource("1_4ivg5")
speed = 15.0

[node name="DirectionRay" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
target_position = Vector3(0, 0, -1)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
visible = false
cast_shadow = 0
mesh = SubResource("CapsuleMesh_xv06v")

[node name="RemoteTransform3D" type="RemoteTransform3D" parent="MeshInstance3D"]

[node name="StandingCollision" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_4ivg5")

[node name="SlidingCollision" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
shape = SubResource("SphereShape3D_g6ire")
disabled = true

[node name="GroundRay" type="RayCast3D" parent="."]
target_position = Vector3(0, -0.15, 0)
hit_from_inside = true

[node name="SlideRay" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
target_position = Vector3(0, -1.5, 0)

[node name="CameraPivot" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.6, 0)

[node name="Camera3D" type="Camera3D" parent="CameraPivot"]
current = true
fov = 90.0

[node name="GrappleCast" type="RayCast3D" parent="CameraPivot/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.707575)
target_position = Vector3(0, 0, -25)
debug_shape_custom_color = Color(0, 0.627451, 0, 1)

[node name="MeshInstance3D" type="MeshInstance3D" parent="CameraPivot/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.101331)
mesh = SubResource("QuadMesh_u1c27")

[node name="HookRopeStart" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.412216, 1, -0.5)

[node name="HookController" type="Node" parent="." node_paths=PackedStringArray("hook_raycast", "player_body")]
script = SubResource("GDScript_n7ghd")
hook_raycast = NodePath("../CameraPivot/Camera3D/GrappleCast")
player_body = NodePath("..")

[node name="CrouchCameraPivot" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.7, 0)

[node name="LedgeDetectorRay" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.8, 0)
target_position = Vector3(0, 0.6, -0.6)

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("5_qhaxn")

[node name="Grounded" type="Node" parent="StateMachine"]
script = ExtResource("6_p3tak")

[node name="Airborne" type="Node" parent="StateMachine"]
script = ExtResource("7_xm0pw")

[node name="FreeSpace" type="Node" parent="StateMachine"]
script = ExtResource("8_blphk")

[node name="LedgeClimbing" type="Node" parent="StateMachine"]
script = ExtResource("9_jp1l5")

[node name="Sliding" type="Node" parent="StateMachine"]
script = ExtResource("10_kv52j")

[node name="Vaulting" type="Node" parent="StateMachine"]
script = ExtResource("11_usg6b")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Chromatic Aberration" type="ColorRect" parent="CanvasLayer"]
material = SubResource("ShaderMaterial_ivps1")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("12_ivps1")
metadata/_edit_use_anchors_ = true

[node name="Speed Lines" type="ColorRect" parent="CanvasLayer"]
z_index = 1
material = SubResource("ShaderMaterial_bwjto")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("14_bwjto")
metadata/_edit_use_anchors_ = true

[node name="SpeedrunTimer" type="Node" parent="."]
script = ExtResource("15_606se")
